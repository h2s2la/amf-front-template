{"version":3,"sources":["utils/axiosHandler.js","api/board.js","components/@extended/DataTable.js","pages/board/Board.js"],"names":["axiosInstance","axios","create","baseURL","process","paramsSerializer","params","qs","stringify","interceptors","request","use","config","err","Promise","reject","response","data","POST_URL","getPostList","a","get","getPost","id","deletePost","delete","createPost","post","updatePost","put","DataTable","columns","rows","rowsPerPageOptions","isLoading","rowClick","useState","page","setPage","rowsPerPage","setRowsPerPage","TableContainer","sx","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","width","label","TableBody","colSpan","Box","py","minHeight","CircularProgress","slice","row","hover","tabIndex","onClick","e","cursor","value","render","TablePagination","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","Board","navigate","useNavigate","setData","setLoading","useEffect","findPostList","useCallback","postId","Grid","container","direction","justifyContent","spacing","item","Button","variant"],"mappings":"6JAAA,+BAGMA,EAAgBC,IAAMC,OAAO,CAClCC,QAASC,wBACTC,iBAAkB,SAACC,GAAD,OAAYC,IAAGC,UAAUF,MAG5CN,EAAcS,aAAaC,QAAQC,KAClC,SAACC,GACA,OAAOA,KAER,SAACC,GAEA,OAAOC,QAAQC,OAAOF,MAIxBb,EAAcS,aAAaO,SAASL,KAAI,YACvC,OAD6D,EAApBM,QAG3BjB,O,mPCnBTkB,EAAW,gBAEJC,EAAW,uCAAG,WAAOb,GAAP,SAAAc,EAAA,+EAAkBnB,IAAMoB,IAAIH,EAAUZ,IAAtC,2CAAH,sDAEXgB,EAAO,uCAAG,6BAAAF,EAAA,6DAAQG,EAAR,EAAQA,GAAR,kBAAgBtB,IAAMoB,IAAN,UAAaH,EAAb,YAAyBK,KAAzC,2CAAH,sDAEPC,EAAU,uCAAG,6BAAAJ,EAAA,6DAAQG,EAAR,EAAQA,GAAR,kBAAgBtB,IAAMwB,OAAN,UAAgBP,EAAhB,YAA4BK,KAA5C,2CAAH,sDAEVG,EAAU,uCAAG,WAAOpB,GAAP,SAAAc,EAAA,+EAAkBnB,IAAM0B,KAAN,UAAcT,GAAYZ,IAA5C,2CAAH,sDAEVsB,EAAU,uCAAG,aAAatB,GAAb,eAAAc,EAAA,6DAAQG,EAAR,EAAQA,GAAR,kBACzBtB,IAAM4B,IAAN,UAAaX,EAAb,YAAyBK,GAAMjB,IADN,2CAAH,yD,oNCmERwB,EA1EG,SAAC,GAAgF,IAA9EC,EAA6E,EAA7EA,QAASC,EAAoE,EAApEA,KAAoE,IAA9DC,0BAA8D,MAAzC,CAAC,GAAI,GAAI,KAAgC,EAA1BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAClF,EAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAWA,OACC,qCACC,cAACC,EAAA,EAAD,CAAgBC,GAAI,CAAEC,UAAW,KAAjC,SACC,eAACC,EAAA,EAAD,CAAOC,cAAY,EAAC,aAAW,eAA/B,UACC,cAACC,EAAA,EAAD,UACC,cAACC,EAAA,EAAD,UACEhB,EAAQiB,KAAI,SAACC,GAAD,OACZ,cAACC,EAAA,EAAD,CAA2BC,MAAOF,EAAOE,MAAQF,EAAOE,MAAQ,SAAUC,MAAO,CAAEC,MAAOJ,EAAOI,OAAjG,SACEJ,EAAOK,OADOL,EAAO1B,WAM1B,cAACgC,EAAA,EAAD,UACGrB,EAuBD,cAACa,EAAA,EAAD,UACC,cAACG,EAAA,EAAD,CAAWC,MAAM,SAASK,QAAS,EAAnC,SACC,cAACC,EAAA,EAAD,CAAKf,GAAI,CAAEgB,GAAI,EAAGC,UAAW,KAA7B,SACC,cAACC,EAAA,EAAD,UAzBH5B,GACAA,EAAK6B,MAAMxB,EAAOE,EAAaF,EAAOE,EAAcA,GAAaS,KAAI,SAACc,GACrE,OACC,cAACf,EAAA,EAAD,CACCgB,OAAK,EACLC,UAAW,EAEXC,QAAS9B,EAAW,SAAC+B,GAAD,OAAO/B,EAAS+B,EAAGJ,IAAO,aAC9CV,MAAO,CAAEe,OAAQ,WALlB,SAOEpC,EAAQiB,KAAI,SAACC,GACb,IAAMmB,EAAQN,EAAIb,EAAO1B,IACzB,OACC,cAAC2B,EAAA,EAAD,CAA2BC,MAAOF,EAAOE,MAAQF,EAAOE,MAAQ,SAAhE,SACEF,EAAOoB,OAASpB,EAAOoB,OAAOP,GAAOM,GADvBnB,EAAO1B,QAPpBuC,EAAIvC,cA2BhB,cAAC+C,EAAA,EAAD,CACCrC,mBAAoBA,EACpBsC,UAAU,MACVC,MAAOxC,EAAOA,EAAKyC,OAAS,EAC5BlC,YAAaA,EACbF,KAAMA,EACNqC,aA1DsB,SAACC,EAAOC,GAChCtC,EAAQsC,IA0DNC,oBAhE6B,SAACF,GAChCnC,GAAgBmC,EAAMG,OAAOV,OAC7B9B,EAAQ,U,iBC+CJP,GAFSgD,UAlDD,WACb,IAAMC,EAAWC,cAEjB,EAAwB7C,mBAAS,IAAjC,mBAAOnB,EAAP,KAAaiE,EAAb,KACA,EAAgC9C,oBAAS,GAAzC,mBAAOF,EAAP,KAAkBiD,EAAlB,KAEAC,qBAAU,WACTC,MACE,IAEH,IAAMA,EAAY,uCAAG,4BAAAjE,EAAA,6DACpB+D,GAAW,GADS,SAEGhE,cAFH,OAEdH,EAFc,OAGpBkE,EAAQlE,GACRmE,GAAW,GAJS,2CAAH,qDAWZhD,EAAWmD,uBAAY,SAACpB,EAAGJ,GAChC,IAAMyB,EAASzB,EAAIvC,GACnByD,EAAS,SAAD,OAAUO,MAChB,IAEH,OACC,qCACC,cAACC,EAAA,EAAD,CACCC,WAAS,EACTC,UAAU,MACVC,eAAe,WACfC,QAAS,EAJV,SAMC,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,SACC,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAY9B,QAlBL,WAC1Be,EAAS,gBAiBN,oCAKF,cAAC,EAAD,CACCjD,QAASA,EACTC,KAAMf,EACNgB,mBAAoB,CAAC,GAAI,GAAI,IAC7BC,UAAWA,EACXC,SAAUA,QAOE,CACf,CACCZ,GAAI,QACJ+B,MAAO,eACPD,MAAO,IACPF,MAAO,QAER,CACC5B,GAAI,SACJ+B,MAAO,qBACPD,MAAO,GACPF,MAAO","file":"static/js/12.27481ece.chunk.js","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\n\nconst axiosInstance = axios.create({\n\tbaseURL: process.env.REACT_APP_API_SERVER,\n\tparamsSerializer: (params) => qs.stringify(params),\n});\n\naxiosInstance.interceptors.request.use(\n\t(config) => {\n\t\treturn config;\n\t},\n\t(err) => {\n\t\t// eslint-disable-next-line no-undef\n\t\treturn Promise.reject(err);\n\t},\n);\n\naxiosInstance.interceptors.response.use(({data: response}) => {\n\treturn response;\n});\nexport default axiosInstance;\n\n","import {default as axios} from 'utils/axiosHandler';\n\nconst POST_URL = '/api/v1/posts';\n\nexport const getPostList = async (params) => axios.get(POST_URL, params);\n\nexport const getPost = async ({id}) => axios.get(`${POST_URL}/${id}`);\n\nexport const deletePost = async ({id}) => axios.delete(`${POST_URL}/${id}`);\n\nexport const createPost = async (params) => axios.post(`${POST_URL}`, params);\n\nexport const updatePost = async ({id}, params) =>\n\taxios.put(`${POST_URL}/${id}`, params);\n","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableHead, TableBody, TableCell, TableContainer, TablePagination, TableRow, Table, Box, CircularProgress } from '@mui/material';\n\nconst DataTable = ({ columns, rows, rowsPerPageOptions = [10, 25, 100], isLoading, rowClick }) => {\n\tconst [page, setPage] = useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(+event.target.value);\n\t\tsetPage(0);\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer sx={{ maxHeight: 440 }}>\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'} style={{ width: column.width }}>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{!isLoading ? (\n\t\t\t\t\t\t\trows &&\n\t\t\t\t\t\t\trows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\tkey={row.id}\n\t\t\t\t\t\t\t\t\t\tonClick={rowClick ? (e) => rowClick(e, row) : () => {}}\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.render ? column.render(row) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell align=\"center\" colSpan={6}>\n\t\t\t\t\t\t\t\t\t<Box sx={{ py: 3, minHeight: 560 }}>\n\t\t\t\t\t\t\t\t\t\t<CircularProgress />\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={rowsPerPageOptions}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={rows ? rows.length : 0}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonPageChange={handleChangePage}\n\t\t\t\tonRowsPerPageChange={handleChangeRowsPerPage}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default DataTable;\n\nDataTable.propTypes = {\n\tcolumns: PropTypes.array,\n\trows: PropTypes.array,\n\trowsPerPageOptions: PropTypes.array,\n\tisLoading: PropTypes.bool,\n\trowClick: PropTypes.func\n};\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {Button, Grid} from '@mui/material';\nimport DataTable from 'components/@extended/DataTable';\nimport {useNavigate} from 'react-router-dom';\nimport {getPostList} from 'api/board';\n\nconst Board = () => {\n\tconst navigate = useNavigate();\n\n\tconst [data, setData] = useState([]);\n\tconst [isLoading, setLoading] = useState(false);\n\n\tuseEffect(() => {\n\t\tfindPostList();\n\t}, []);\n\n\tconst findPostList = async () => {\n\t\tsetLoading(true);\n\t\tconst response = await getPostList();\n\t\tsetData(response);\n\t\tsetLoading(false);\n\t};\n\n\tconst moveCreatePostPage = () => {\n\t\tnavigate(`/post/write`);\n\t};\n\n\tconst rowClick = useCallback((e, row) => {\n\t\tconst postId = row.id;\n\t\tnavigate(`/post/${postId}`);\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tdirection='row'\n\t\t\t\tjustifyContent='flex-end'\n\t\t\t\tspacing={2}\n\t\t\t>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button variant='contained' onClick={moveCreatePostPage}>\n\t\t\t\t\t\t글쓰기\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<DataTable\n\t\t\t\tcolumns={columns}\n\t\t\t\trows={data}\n\t\t\t\trowsPerPageOptions={[10, 20, 30]}\n\t\t\t\tisLoading={isLoading}\n\t\t\t\trowClick={rowClick}\n\t\t\t/>\n\t\t</>\n\t);\n};\nexport default Board;\n\nconst columns = [\n\t{\n\t\tid: 'title',\n\t\tlabel: '제목',\n\t\twidth: 290,\n\t\talign: 'left',\n\t},\n\t{\n\t\tid: 'author',\n\t\tlabel: '작성자',\n\t\twidth: 60,\n\t\talign: 'left',\n\t},\n];\n"],"sourceRoot":""}